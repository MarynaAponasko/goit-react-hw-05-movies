{"version":3,"file":"static/js/583.bc448722.chunk.js","mappings":"yNAoDA,UAhDiB,WACf,OAAwBA,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KAEQC,GAAOC,EAAAA,EAAAA,MAAPD,GAmBR,OAjBAE,EAAAA,EAAAA,YAAU,WACR,GAAKF,EAAL,CAGA,IAAMG,EAAS,mCAAG,gHAIJC,EAAAA,EAAAA,IAAkBJ,GAJd,gBAGJF,EAHI,EAGZO,KAAQP,KAEVC,EAAQD,GALM,gDAOdQ,QAAQC,IAAI,KAAMC,SAPJ,yDAAH,qDAUfL,GAXC,CAYF,GAAE,CAACH,KAGF,8BACmB,IAAhBF,EAAKW,QACJ,uEAEA,wBACGX,EAAKY,KAAI,YAAiC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,aAAcZ,EAAS,EAATA,GAC/B,OACE,0BACGY,IACC,gBACEC,IAAG,yCAAoCD,GACvCE,IAAKH,EACLI,MAAM,SAGV,uBAAIJ,MARGX,EAWZ,OAKV,C,oKChDKgB,EAAM,mCACZC,EAAAA,EAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAsB,WACjC,OAAOD,EAAAA,EAAAA,GAAM,sBAAuB,CAClCE,OAAQ,CACNC,QAASJ,EACTK,KAAM,IAGX,EAEYC,EAAsB,SAAAC,GACjC,OAAON,EAAAA,EAAAA,GAAM,gBAAiB,CAC5BE,OAAQ,CACNC,QAASJ,EACTK,KAAM,EACNG,SAAU,QACVC,eAAe,EACfF,MAAAA,IAGL,EACYG,EAAkB,SAAA1B,GAC7B,OAAOiB,EAAAA,EAAAA,GAAM,UAAD,OAAWjB,GAAM,CAC3BmB,OAAQ,CACNC,QAASJ,IAGd,EAEYZ,EAAoB,SAAAJ,GAC/B,OAAOiB,EAAAA,EAAAA,GAAM,UAAD,OAAWjB,EAAX,YAAyB,CACnCmB,OAAQ,CACNC,QAASJ,IAGd,EACYW,EAAqB,SAAA3B,GAChC,OAAOiB,EAAAA,EAAAA,GAAM,UAAD,OAAWjB,EAAX,YAAyB,CACnCmB,OAAQ,CACNC,QAASJ,IAGd,C","sources":["pages/CastPage/CastPage.jsx","services/api.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMoviesActors } from 'services/api';\n\nconst CastPage = () => {\n  const [cast, setCast] = useState([]);\n\n  const { id } = useParams();\n\n  useEffect(() => {\n    if (!id) {\n      return;\n    }\n    const fetchCast = async () => {\n      try {\n        const {\n          data: { cast },\n        } = await fetchMoviesActors(id);\n        setCast(cast);\n      } catch (error) {\n        console.log(error.message);\n      }\n    };\n    fetchCast();\n  }, [id]);\n\n  return (\n    <>\n      {cast.length === 0 ? (\n        <p>We don't have any authorts for this movie.</p>\n      ) : (\n        <ul>\n          {cast.map(({ name, profile_path, id }) => {\n            return (\n              <li key={id}>\n                {profile_path && (\n                  <img\n                    src={`https://image.tmdb.org/t/p/w500${profile_path}`}\n                    alt={name}\n                    width=\"100\"\n                  />\n                )}\n                <p>{name}</p>\n              </li>\n            );\n          })}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default CastPage;\n","import axios from 'axios';\n\nconst KEY = '9225d40049583defe43ffc34168e4f8c';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const fetchTrendingMovies = () => {\n  return axios('/trending/movie/day', {\n    params: {\n      api_key: KEY,\n      page: 1,\n    },\n  });\n};\n\nexport const fetchMoviesBySearch = query => {\n  return axios('/search/movie', {\n    params: {\n      api_key: KEY,\n      page: 1,\n      language: 'en-US',\n      include_adult: false,\n      query,\n    },\n  });\n};\nexport const fetchMoviesById = id => {\n  return axios(`/movie/${id}`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n};\n\nexport const fetchMoviesActors = id => {\n  return axios(`/movie/${id}/credits`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n};\nexport const fetchMoviesReviews = id => {\n  return axios(`/movie/${id}/reviews`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n};\n"],"names":["useState","cast","setCast","id","useParams","useEffect","fetchCast","fetchMoviesActors","data","console","log","message","length","map","name","profile_path","src","alt","width","KEY","axios","fetchTrendingMovies","params","api_key","page","fetchMoviesBySearch","query","language","include_adult","fetchMoviesById","fetchMoviesReviews"],"sourceRoot":""}